AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: notes-app
Globals:
  Function:
    Layers:
    - Ref: RuntimeDependenciesLayer
    Environment:
      Variables:
        DYNAMODB_TABLE:
          Ref: Table
        ITEM_QUEUE:
          Ref: WriteQueue
    Runtime: nodejs14.x
    MemorySize: 1024
    Timeout: 100
Parameters:
  Stage:
    Type: String
    Description: API Gateway stage variable and lambda function alias
Resources:
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName:
        Ref: Stage
      TracingEnabled: true
      Name: notes-app
      Cors: "'*'"
      OpenApiVersion: 3.0.1
  getAllNotesFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Handler: dist/handlers/get-all-notes.getAllNotesHandler
      Description: A simple example includes a HTTP get method to get all notes from
        a DynamoDB table.
      AutoPublishAlias:
        Ref: Stage
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: Table
      Events:
        Api:
          Type: Api
          Properties:
            Path: /
            Method: GET
            RestApiId:
              Ref: ApiGatewayApi
      CodeUri: s3://aws-sam-cli-managed-default-samclisourcebucket-1a9p9e4bisl97/2510a1d0f58a8d4cd0d8ec9b53d013a0
  getNoteFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Handler: dist/handlers/get-note.getNoteHandler
      Description: A simple example includes a HTTP get method to get one note by
        id and category from a DynamoDB table.
      AutoPublishAlias:
        Ref: Stage
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: Table
      Events:
        Api:
          Type: Api
          Properties:
            Path: /{category}/{id}
            Method: GET
            RestApiId:
              Ref: ApiGatewayApi
      CodeUri: s3://aws-sam-cli-managed-default-samclisourcebucket-1a9p9e4bisl97/2510a1d0f58a8d4cd0d8ec9b53d013a0
  putNoteFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Handler: dist/handlers/put-note.putNoteHandler
      Description: A simple example includes a HTTP post method to add one note to
        an SQS queue (to be written to a DynamoDB table later.
      AutoPublishAlias:
        Ref: Stage
      Policies:
      - SQSSendMessagePolicy:
          QueueName:
            Fn::GetAtt:
            - WriteQueue
            - QueueName
      Events:
        Api:
          Type: Api
          Properties:
            Path: /
            Method: POST
            RestApiId:
              Ref: ApiGatewayApi
      CodeUri: s3://aws-sam-cli-managed-default-samclisourcebucket-1a9p9e4bisl97/2510a1d0f58a8d4cd0d8ec9b53d013a0
  updateNoteFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Handler: dist/handlers/update-note.updateNoteHandler
      Description: A simple example includes a HTTP put method to update one note
        to an SQS queue (to be written to a DynamoDB table later.
      AutoPublishAlias:
        Ref: Stage
      Policies:
      - SQSSendMessagePolicy:
          QueueName:
            Fn::GetAtt:
            - WriteQueue
            - QueueName
      Events:
        Api:
          Type: Api
          Properties:
            Path: /
            Method: PUT
            RestApiId:
              Ref: ApiGatewayApi
      CodeUri: s3://aws-sam-cli-managed-default-samclisourcebucket-1a9p9e4bisl97/2510a1d0f58a8d4cd0d8ec9b53d013a0
  writeNoteFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Handler: dist/handlers/write-note.writeNoteHandler
      Description: A simple example includes an SQS subscription to write queued object
        to DynamoDB
      AutoPublishAlias:
        Ref: Stage
      Timeout: 25
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: Table
      Events:
        SQSQueueEvent:
          Type: SQS
          Properties:
            Queue:
              Fn::GetAtt:
              - WriteQueue
              - Arn
            BatchSize: 1
      CodeUri: s3://aws-sam-cli-managed-default-samclisourcebucket-1a9p9e4bisl97/2510a1d0f58a8d4cd0d8ec9b53d013a0
  deleteNoteFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Handler: dist/handlers/delete-note.deleteNoteHandler
      Description: A simple example includes a HTTP delete method to delete one note
        by id and category from a DynamoDB table.
      AutoPublishAlias:
        Ref: Stage
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: Table
      Events:
        Api:
          Type: Api
          Properties:
            Path: /{category}/{id}
            Method: DELETE
            RestApiId:
              Ref: ApiGatewayApi
      CodeUri: s3://aws-sam-cli-managed-default-samclisourcebucket-1a9p9e4bisl97/2510a1d0f58a8d4cd0d8ec9b53d013a0
  Table:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Delete
    Properties:
      TableName: Notes
      AttributeDefinitions:
      - AttributeName: id
        AttributeType: S
      - AttributeName: category
        AttributeType: S
      KeySchema:
      - AttributeName: id
        KeyType: HASH
      - AttributeName: category
        KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
      Tags:
      - Key: Name
        Value: notes-dynamodb-table
  WriteQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: WriteQueue
  RuntimeDependenciesLayer:
    Type: AWS::Serverless::LayerVersion
    Metadata:
      BuildMethod: makefile
    Properties:
      LayerName: notes-app-dependencies
      Description: Runtime dependencies for Lambdas
      ContentUri: s3://aws-sam-cli-managed-default-samclisourcebucket-1a9p9e4bisl97/2510a1d0f58a8d4cd0d8ec9b53d013a0
      CompatibleRuntimes:
      - nodejs14.x
      RetentionPolicy: Retain
Outputs:
  WebEndpoint:
    Description: API Gateway endpoint URL for Prod stage
    Value:
      Fn::Sub: https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/
