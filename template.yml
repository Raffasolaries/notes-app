# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: 2010-09-09
# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform: AWS::Serverless-2016-10-31
Description: notes-app

Globals:
  Function:
    Layers:
      - !Ref RuntimeDependenciesLayer
    Environment:
      # Environment variables used by every function
      Variables:
       DYNAMODB_TABLE: !Ref Table
       ITEM_QUEUE: !Ref WriteQueue
      #  STAGE: !Ref Stage
    Runtime: nodejs14.x
    MemorySize: 1024
    Timeout: 100

Parameters:
  Stage:
    Type: String
    Description: API Gateway stage variable and lambda function alias
  CallbackURL:
    Type: String
    Description: Cognito JWT Authorizer Callback URL
    Default: https://d11qc1n34wn4nn.cloudfront.net/

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  ApiGatewayHttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: !Ref Stage
      Description: Notes App Backend Gateway
      CorsConfiguration:
        AllowOrigins:
          - "*"
        AllowHeaders:
          - "*"
        # AllowCredentials: true
        AllowMethods:
          - GET
          - OPTIONS
          - POST
          - PUT
          - DELETE
      FailOnWarnings: true
      Auth:
        DefaultAuthorizer: JWTAuthorizer
        Authorizers:
          JWTAuthorizer:
            JwtConfiguration:
              issuer: !Sub https://cognito-idp.${AWS::Region}.amazonaws.com/${UserPool}
              audience:
                - !Ref AppClient
            IdentitySource:
              - $request.header.Authorization
      DefaultRouteSettings:
        DetailedMetricsEnabled: true
        ThrottlingBurstLimit: 10
        ThrottlingRateLimit: 10
      AccessLogSettings:
        DestinationArn: !Sub ${AccessLogs.Arn}
        Format: >-
          {"requestId":"$context.requestId", "ip": "$context.identity.sourceIp",
          "caller":"$context.identity.caller",
          "user":"$context.identity.user","requestTime":"$context.requestTime",
          "routeKey":"$context.routeKey","status":"$context.status"}

      # DefinitionBody:
      #   openapi: "3.0.1"
      #   info:
      #     title: "notes-app"
      #   paths:
      #     /:
      #       get:
      #         sunnary: Gets all notes
      #         operationId: GetNotes
      #         x-amazon-apigateway-integration:
      #           # uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${getAllNotesFunction.Arn}/invocations
      #           payloadFormatVersion: "2.0"
      #           uri: !GetAtt getAllNotesFunction.Arn
      #           passthroughBehavior: WHEN_NO_TEMPLATES
      #           httpMethod: POST
      #           type: AWS_PROXY
      #           connectionType: INTERNET
      #         responses:
      #           "200":
      #             description: Retrieve all elements
      #           "204":
      #             description: No element found
      #       post:
      #         sunnary: Creates a new Note
      #         operationId: CreateNote
      #         x-amazon-apigateway-integration:
      #           # uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${putNoteFunction.Arn}/invocations
      #           payloadFormatVersion: "2.0"
      #           uri: !GetAtt putNoteFunction.Arn
      #           passthroughBehavior: WHEN_NO_TEMPLATES
      #           httpMethod: POST
      #           type: AWS_PROXY
      #           connectionType: INTERNET
      #         requestBody:
      #           content:
      #             application/json:
      #               schema:
      #                 $ref: "#/components/schemas/NoteDto"
      #           required: true
      #       put:
      #         sunnary: Updates a Note
      #         operationId: UpdateNote
      #         x-amazon-apigateway-integration:
      #           # uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${updateNoteFunction.Arn}/invocations
      #           payloadFormatVersion: "2.0"
      #           uri: !GetAtt updateNoteFunction.Arn
      #           passthroughBehavior: WHEN_NO_TEMPLATES
      #           httpMethod: POST
      #           type: AWS_PROXY
      #           connectionType: INTERNET
      #         requestBody:
      #           content:
      #             application/json:
      #               schema:
      #                 $ref: "#/components/schemas/NoteDto"
      #           required: true
      #     /{cateogry}/{id}:
      #       get:
      #         sunnary: Gets a note
      #         operationId: GetNote
      #         x-amazon-apigateway-integration:
      #           # uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${getNoteFunction.Arn}/invocations
      #           payloadFormatVersion: "2.0"
      #           uri: !GetAtt getNoteFunction.Arn
      #           passthroughBehavior: WHEN_NO_TEMPLATES
      #           httpMethod: POST
      #           type: AWS_PROXY
      #           connectionType: INTERNET
      #         responses:
      #           "200":
      #             description: Element retrieved
      #           "204":
      #             description: No element found
      #       delete:
      #         sunnary: Deletes a Note
      #         operationId: DeleteNote
      #         x-amazon-apigateway-integration:
      #           # uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${deleteNoteFunction.Arn}/invocations
      #           payloadFormatVersion: "2.0"
      #           uri: !GetAtt deleteNoteFunction.Arn
      #           passthroughBehavior: WHEN_NO_TEMPLATES
      #           httpMethod: POST
      #           type: AWS_PROXY
      #           connectionType: INTERNET
      #         responses:
      #           "200":
      #             description: Deleted element
      #           "406":
      #             description: No element found
      #   components:
      #     schemas:
      #       NoteDto:
      #         description: Create and Update note Dto
      #         type: object
      #         required:
      #           - id
      #           - category
      #           - text
      #         properties:
      #           id:
      #             type: string
      #           category:
      #             type: string
      #           text:
      #             type: string

  # This is a Lambda function config associated with the source code: get-all-notes.js
  getAllNotesFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Handler: dist/handlers/get-all-notes.getAllNotesHandler
      Description: A simple example includes a HTTP get method to get all notes from a DynamoDB table.
      AutoPublishAlias: !Ref Stage
      Policies:
      # Give Create/Read/Update/Delete Permissions to the SampleTable
      - DynamoDBReadPolicy:
          TableName: !Ref Table
      - CloudWatchPutMetricPolicy: {}
      Events:
        Api:
          Type: HttpApi
          Properties:
            Path: /
            Method: GET
            ApiId: !Ref ApiGatewayHttpApi
            Auth:
              Authorizer: JWTAuthorizer

  # This is a Lambda function config associated with the source code: get-by-id.js
  getNoteFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Handler: dist/handlers/get-note.getNoteHandler
      Description: A simple example includes a HTTP get method to get one note by id and category from a DynamoDB table.
      AutoPublishAlias: !Ref Stage
      Policies:
      # Give Create/Read/Update/Delete Permissions to the SampleTable
      - DynamoDBReadPolicy:
          TableName: !Ref Table
      - CloudWatchPutMetricPolicy: {}
      Events:
        Api:
          Type: HttpApi
          Properties:
            Path: /{category}/{id}
            Method: GET
            ApiId: !Ref ApiGatewayHttpApi
            Auth:
              Authorizer: JWTAuthorizer

  # This is a Lambda function config associated with the source code: put-item.js
  putNoteFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Handler: dist/handlers/put-note.putNoteHandler
      Description: A simple example includes a HTTP post method to add one note to an SQS queue (to be written to a DynamoDB table later.
      AutoPublishAlias: !Ref Stage
      Policies:
      # Give permission to send message to an Amazon SQS queue. See https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-template-list.html#sqs-send-message-policy
      - SQSSendMessagePolicy:
          QueueName: !GetAtt WriteQueue.QueueName
      - CloudWatchPutMetricPolicy: {}
      Events:
        Api:
          Type: HttpApi
          Properties:
            Path: /
            Method: POST
            ApiId: !Ref ApiGatewayHttpApi
            Auth:
              Authorizer: JWTAuthorizer

  # This is a Lambda function config associated with the source code: put-item.js
  updateNoteFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Handler: dist/handlers/update-note.updateNoteHandler
      Description: A simple example includes a HTTP put method to update one note to an SQS queue (to be written to a DynamoDB table later.
      AutoPublishAlias: !Ref Stage
      Policies:
      # Give permission to send message to an Amazon SQS queue. See https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-template-list.html#sqs-send-message-policy
      - SQSSendMessagePolicy:
          QueueName: !GetAtt WriteQueue.QueueName
      - CloudWatchPutMetricPolicy: {}
      Events:
        Api:
          Type: HttpApi
          Properties:
            Path: /
            Method: PUT
            ApiId: !Ref ApiGatewayHttpApi
            Auth:
              Authorizer: JWTAuthorizer

  # This is a Lambda function config associated with the source code: write-item.ts
  writeNoteFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Handler: dist/handlers/write-note.writeNoteHandler
      Description: A simple example includes an SQS subscription to write queued object to DynamoDB
      AutoPublishAlias: !Ref Stage
      Timeout: 25 # Chosen to be less than the default SQS Visibility Timeout of 30 seconds
      Policies:
      # Give Create/Read/Update/Delete Permissions to the SampleTable, see https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-template-list.html#dynamo-db-crud-policy
      - DynamoDBCrudPolicy:
          TableName: !Ref Table
      - CloudWatchPutMetricPolicy: {}
      Events:
        # Subscription to primary SQS queue
        SQSQueueEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt WriteQueue.Arn
            BatchSize: 1

  # This is a Lambda function config associated with the source code: get-by-id.js
  deleteNoteFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Handler: dist/handlers/delete-note.deleteNoteHandler
      Description: A simple example includes a HTTP delete method to delete one note by id and category from a DynamoDB table.
      AutoPublishAlias: !Ref Stage
      Policies:
      # Give Create/Read/Update/Delete Permissions to the SampleTable
      - DynamoDBCrudPolicy:
          TableName: !Ref Table
      - CloudWatchPutMetricPolicy: {}
      Events:
        Api:
          Type: HttpApi
          Properties:
            Path: /{category}/{id}
            Method: DELETE
            ApiId: !Ref ApiGatewayHttpApi
            Auth:
              Authorizer: JWTAuthorizer

  # DynamoDB table to store item: {id: &lt;ID&gt;, category: &lt;CATEGORY&gt;}
  Table:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Delete
    Properties:
      TableName: Notes
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: category
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
        - AttributeName: category
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
      Tags:
        - Key: Name
          Value: notes-dynamodb-table

  WriteQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: WriteQueue

  AccessLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub ${ApiGatewayHttpApi}-access-logs
      RetentionInDays: 365

  # Shared layer with Lambda runtime dependencies
  RuntimeDependenciesLayer:
    Type: AWS::Serverless::LayerVersion
    Metadata:
      BuildMethod: makefile
    Properties:
      LayerName: "notes-app-dependencies"
      Description: Runtime dependencies for Lambdas
      ContentUri: ./
      CompatibleRuntimes:
        - nodejs14.x
      RetentionPolicy: Retain

  # Cognito Authorizer Pool
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: NotesAPIUserPool
      AutoVerifiedAttributes:
        - email
      Schema:
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true
  AppClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      AllowedOAuthFlows: 
        - implicit
      AllowedOAuthScopes: 
        - aws.cognito.signin.user.admin
        - email
        - openid
        - profile
      AllowedOAuthFlowsUserPoolClient: true
      ClientName: NotesAppClient
      CallbackURLs:
        - !Ref CallbackURL
        # - !Sub https://${ApiGatewayHttpApi}.execute-api.${AWS::Region}.amazonaws.com/callback
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      UserPoolId: !Ref UserPool
      SupportedIdentityProviders:
        - COGNITO 
  HostedUI:
    Type: AWS::Cognito::UserPoolDomain
    Properties: 
      Domain: !Join
        - '-'
        - - !Ref ApiGatewayHttpApi
          - !Ref AppClient
      UserPoolId: !Ref UserPool

Outputs:
  WebEndpoint:
    Description: API Gateway endpoint URL for Prod stage
    Value: !Sub https://${ApiGatewayHttpApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/
  SignupURL:
    Description: Signup
    Value: !Sub https://${HostedUI}.auth.${AWS::Region}.amazoncognito.com/login?client_id=${AppClient}&response_type=token&scope=email+profile&redirect_uri=${CallbackURL}
