# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  notes-app

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform: AWS::Serverless-2016-10-31

Globals:
  Function:
    Layers:
      - !Ref RuntimeDependenciesLayer
    Environment:
      # Environment variables used by every function
      Variables:
       DYNAMODB_TABLE: !Ref Table
       ITEM_QUEUE: !Ref WriteQueue
    Runtime: nodejs14.x
    MemorySize: 128
    Timeout: 100

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      TracingEnabled: true
      Name: notes-app
      Cors: "'*'"
      OpenApiVersion: "3.0.1"
      # Models:
      #   NoteDto:
      #     properties:

            
      DefinitionBody:
        openapi: "3.0.1"
        info:
          title: "notes-app"
        paths:
          /:
            get:
              x-amazon-apigateway-integration:
                uri: !Sub ${getAllNotesFunction.Arn}
                passthroughBehavior: "never"
                httpMethod: "POST"
                type: "aws_proxy"
                payloadFormatVersion: "2.0"
              responses:
                "200":
                  description: Retrieve all elements
                "204":
                  description: No element found
            post:
              x-amazon-apigateway-integration:
                uri: !Sub ${putNoteFunction.Arn}
                passthroughBehavior: "never"
                httpMethod: "POST"
                type: "aws_proxy"
                payloadFormatVersion: "2.0"
              requestBody:
                content:
                  application/json:
                    schema:
                      $ref: "#/components/schemas/NoteDto"
            put:
              x-amazon-apigateway-integration:
                uri: !Sub ${putNoteFunction.Arn}
                passthroughBehavior: "never"
                httpMethod: "POST"
                type: "aws_proxy"
                payloadFormatVersion: "2.0"
              requestBody:
                content:
                  application/json:
                    schema:
                      $ref: "#/components/schemas/NoteDto"
          /{cateogry}/{id}:
            get:
              x-amazon-apigateway-integration:
                uri: !Sub ${getNoteFunction.Arn}
                passthroughBehavior: "never"
                httpMethod: "POST"
                type: "aws_proxy"
              responses:
                "200":
                  description: Element retrieved
                "204":
                  description: No element found
            delete:
              x-amazon-apigateway-integration:
                uri: !Sub ${deleteNoteFunction.Arn}
                passthroughBehavior: "never"
                httpMethod: "POST"
                type: "aws_proxy"
              responses:
                "200":
                  description: Deleted element
                "406":
                  description: No element found
        components:
          schemas:
            NoteDto:
              type: object
              required:
                - id
                - category
                - text
            properties:
              id:
                type: string
              category:
                type: string
              text:
                type: string

  # This is a Lambda function config associated with the source code: get-all-notes.js
  getAllNotesFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Handler: dist/handlers/get-all-notes.getAllNotesHandler
      Description: A simple example includes a HTTP get method to get all notes from a DynamoDB table.
      Policies:
      # Give Create/Read/Update/Delete Permissions to the SampleTable
      - DynamoDBCrudPolicy:
            TableName: !Ref Table
      Events:
        Api:
          Type: Api
          Properties:
            Path: /
            Method: GET

  # This is a Lambda function config associated with the source code: get-by-id.js
  getNoteFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Handler: dist/handlers/get-note.getNoteHandler
      Description: A simple example includes a HTTP get method to get one note by id and category from a DynamoDB table.
      Policies:
      # Give Create/Read/Update/Delete Permissions to the SampleTable
      - DynamoDBCrudPolicy:
          TableName: !Ref Table
      Events:
        Api:
          Type: Api
          Properties:
            Path: /{category}/{id}
            Method: GET

  # This is a Lambda function config associated with the source code: put-item.js
  putNoteFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Handler: dist/handlers/put-note.putNoteHandler
      Description: A simple example includes a HTTP post method to add one note to an SQS queue (to be written to a DynamoDB table later.
      Policies:
      # Give permission to send message to an Amazon SQS queue. See https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-template-list.html#sqs-send-message-policy
      - SQSSendMessagePolicy:
          QueueName: !GetAtt WriteQueue.QueueName
      Events:
        Api:
          Type: Api
          Properties:
            Path: /
            Method: POST

  # This is a Lambda function config associated with the source code: put-item.js
  updateNoteFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Handler: dist/handlers/update-note.updateNoteHandler
      Description: A simple example includes a HTTP put method to update one note to an SQS queue (to be written to a DynamoDB table later.
      Policies:
      # Give permission to send message to an Amazon SQS queue. See https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-template-list.html#sqs-send-message-policy
      - SQSSendMessagePolicy:
          QueueName: !GetAtt WriteQueue.QueueName
      Events:
        Api:
          Type: Api
          Properties:
            Path: /
            Method: PUT

  # This is a Lambda function config associated with the source code: write-item.ts
  writeNoteFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Handler: dist/handlers/write-note.writeNoteHandler
      Description: A simple example includes an SQS subscription to write queued object to DynamoDB
      Timeout: 25 # Chosen to be less than the default SQS Visibility Timeout of 30 seconds
      Policies:
      # Give Create/Read/Update/Delete Permissions to the SampleTable, see https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-template-list.html#dynamo-db-crud-policy
      - DynamoDBCrudPolicy:
          TableName: !Ref Table
      Events:
        # Subscription to primary SQS queue
        SQSQueueEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt WriteQueue.Arn
            BatchSize: 1

  # This is a Lambda function config associated with the source code: get-by-id.js
  deleteNoteFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Handler: dist/handlers/delete-note.deleteNoteHandler
      Description: A simple example includes a HTTP delete method to delete one note by id and category from a DynamoDB table.
      Policies:
      # Give Create/Read/Update/Delete Permissions to the SampleTable
      - DynamoDBCrudPolicy:
          TableName: !Ref Table
      Events:
        Api:
          Type: Api
          Properties:
            Path: /{category}/{id}
            Method: DELETE

  # DynamoDB table to store item: {id: &lt;ID&gt;, category: &lt;CATEGORY&gt;}
  Table:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Delete
    Properties:
      TableName: Notes
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: category
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
        - AttributeName: category
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
      Tags:
        - Key: Name
          Value: notes-dynamodb-table

  WriteQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: WriteQueue


  # Shared layer with Lambda runtime dependencies
  RuntimeDependenciesLayer:
    Type: AWS::Serverless::LayerVersion
    Metadata:
      BuildMethod: makefile
    Properties:
      LayerName: "notes-app-dependencies"
      Description: Runtime dependencies for Lambdas
      ContentUri: ./
      CompatibleRuntimes:
        - nodejs14.x
      RetentionPolicy: Retain

Outputs:
  WebEndpoint:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
